import FirebaseFirestore

struct Item {
    /// The ID of the item, generated from Firestore.
    var documentID: String
    //     var ownerID: String
    var name: String
    var detail: String
    
    /// The item's photo URL. These are stored as strings in Firestore.
    var photoURL: URL!
    var collectionID: String!
}

// MARK: - Firestore interoperability

extension Item: DocumentSerializable {

  /// Initializes an Item with a documentID auto-generated by Firestore.
  init(
//    ownerID: String,
    name: String,
    detail: String,
    photoURL: URL) {
    let document = Firestore.firestore().collectionItems.document()
    self.init(documentID: document.documentID,
//              ownerID: ownerID,
        name: name,
        detail: detail,
        photoURL: photoURL)
  }

  /// Initializes an item from a documentID and some data, ostensibly from Firestore.
  private init?(documentID: String, dictionary: [String: Any]) {
   guard
//    let ownerID = dictionary["ownerID"] as? String,
      let name = dictionary["name"] as? String,
    let detail = dictionary["detail"] as? String,
     let photoURLString = dictionary["photoURL"] as? String else { return nil }

       guard let photoURL = URL(string: photoURLString) else { return nil }
    
    self.init(documentID: documentID,
//              ownerID: ownerID,
              name: name,
              detail: detail,
              photoURL: photoURL)
  }

  init?(document: QueryDocumentSnapshot) {
    self.init(documentID: document.documentID, dictionary: document.data())
  }

  init?(document: DocumentSnapshot) {
    guard let data = document.data() else { return nil }
    self.init(documentID: document.documentID, dictionary: data)
  }

  /// The dictionary representation of the restaurant for uploading to Firestore.
  var documentData: [String: Any] {
    return [
//      "ownerID": ownerID,
      "name": name,
      "detail": detail,
       "photoURL": photoURL.absoluteString
    ]
  }

}

// MARK: - Data generation

/// A wrapper of arc4random_uniform, to avoid lots of casting.
func RandomUniform2(_ upperBound: Int) -> Int {
  return Int(arc4random_uniform(UInt32(upperBound)))
}

extension Item {
    
    static func randomPhotoURL() -> URL {
      let number = RandomUniform2(22) + 1
      let URLString =
          "https://storage.googleapis.com/firestorequickstarts.appspot.com/item_\(number).png"
      return URL(string: URLString)!
    }
    
}
