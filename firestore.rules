rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // match /{document=**} {
      // This line means that anybody can read anything in your database. This might
      // not be what you want in a production app.
      // allow read;
      // allow write;
    // }

    match /reviews/{reviewID} {
      allow update: if (request.auth.uid == resource.data.userInfo.userID &&
                       request.resource.data.userInfo.userID == resource.data.userInfo.userID);
      allow create: if request.auth.uid == request.resource.data.userInfo.userID;      
    }

    match /pendingYums/{yumID} {
      allow create: if request.auth.uid == request.resource.data.userID;
    }

    match /restaurants/{restaurantID} {
      function isValidRestaurant(restData) {
        return restData.averageRating is number && 
               restData.averageRating >= 0 && restData.averageRating <= 5.0 &&
               restData.category is string &&
               restData.city is string &&
               restData.name is string &&
               restData.name.size() > 3 && restData.name.size() < 64 &&
               restData.photoURL is string &&
               restData.price is number &&    
               restData.price >= 1 && restData.price <= 3 &&
               restData.reviewCount is number &&
               restData.reviewCount >= 0;
      }

      allow update: if request.auth.uid == resource.data.ownerID && 
                    request.resource.data.reviewCount == resource.data.reviewCount &&
                    request.resource.data.averageRating == resource.data.averageRating &&
                    isValidRestaurant(request.resource.data);
      allow create: if isValidRestaurant(request.resource.data);
    }

    match /users/{userID} {
      allow update: if request.auth.uid == userID;
      allow create: if request.auth.uid == userID;
    }

    match /collections/{collectionID} {
      allow read: if request.auth.uid == resource.data.ownerID;
      allow write: if request.auth.uid == request.resource.data.ownerID;
    }

    match /collectionItems/{collectionID} {
      allow update: if request.auth.uid == resource.data.authorID;
      allow create: if request.auth.uid == request.resource.data.authorID;
      allow read: if request.auth.uid == resource.data.authorID;   
    }

    match /collectionItems/{collectionID}/users/{userID} {
      function isAuthor(){
        let authorID = get(/databases/$(database)/documents/collectionItems/$(collectionID)).data.authorID;  
        return request.auth.uid == authorID;
      }
      allow create: if isAuthor() 
      // || (request.auth.uid == userID);
    }

    match /collectionItems/{collectionID}/items/{itemID} { 

      function isReader(){
        let role = get(/databases/$(database)/documents/collectionItems/$(collectionID)/users/$(request.auth.uid)).data.role;   
        return role == "writer" || role == "reader"
      }

      function isWriter(){
        let role = get(/databases/$(database)/documents/collectionItems/$(collectionID)/users/$(request.auth.uid)).data.role;   
        return role == "writer"
      }

      allow read: if isReader()
      allow write: if isWriter();  
    }
  }
}

